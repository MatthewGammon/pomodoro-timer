{"version":3,"sources":["utils/duration/index.js","pomodoro/Duration.js","pomodoro/Controls.js","utils/class-names/index.js","pomodoro/StatusDisplay.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Duration","session","focusDuration","breakDuration","handleFocusDecrease","handleFocusIncrease","handleBreakDecrease","handleBreakIncrease","className","data-testid","type","onClick","disabled","Controls","classNameToBoolean","isTimerRunning","handleStop","playPause","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","StatusDisplay","label","givenSeconds","seconds","round","secondsToDuration","timeRemaining","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","min","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da7031f3.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\r\nimport { minutesToDuration } from '../utils/duration';\r\n\r\nfunction Duration({\r\n  session,\r\n  focusDuration,\r\n  breakDuration,\r\n  handleFocusDecrease,\r\n  handleFocusIncrease,\r\n  handleBreakDecrease,\r\n  handleBreakIncrease,\r\n}) {\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"input-group input-group-lg mb-2\">\r\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n              {/* TODO: Update this text to display the current focus session duration */}\r\n              Focus Duration: {minutesToDuration(focusDuration)}\r\n            </span>\r\n            <div className=\"input-group-append\">\r\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"decrease-focus\"\r\n                onClick={handleFocusDecrease}\r\n                disabled={session || focusDuration === 5}\r\n              >\r\n                <span className=\"oi oi-minus\" />\r\n              </button>\r\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"increase-focus\"\r\n                onClick={handleFocusIncrease}\r\n                disabled={session || focusDuration === 60}\r\n              >\r\n                <span className=\"oi oi-plus\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col\">\r\n          <div className=\"float-right\">\r\n            <div className=\"input-group input-group-lg mb-2\">\r\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                {/* TODO: Update this text to display the current break session duration */}\r\n                Break Duration: {minutesToDuration(breakDuration)}\r\n              </span>\r\n              <div className=\"input-group-append\">\r\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"decrease-break\"\r\n                  onClick={handleBreakDecrease}\r\n                  disabled={session || breakDuration === 1}\r\n                >\r\n                  <span className=\"oi oi-minus\" />\r\n                </button>\r\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"increase-break\"\r\n                  onClick={handleBreakIncrease}\r\n                  disabled={session || breakDuration === 15}\r\n                >\r\n                  <span className=\"oi oi-plus\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Duration;\r\n","import React from 'react';\r\nimport classNames from '../utils/class-names';\r\n\r\nfunction Controls({ isTimerRunning, handleStop, session, playPause }) {\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div\r\n            className=\"btn-group btn-group-lg mb-2\"\r\n            role=\"group\"\r\n            aria-label=\"Timer controls\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-testid=\"play-pause\"\r\n              title=\"Start or pause timer\"\r\n              onClick={playPause}\r\n            >\r\n              <span\r\n                className={classNames({\r\n                  oi: true,\r\n                  'oi-media-play': !isTimerRunning,\r\n                  'oi-media-pause': isTimerRunning,\r\n                })}\r\n              />\r\n            </button>\r\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\r\n            {/* TODO: Disable the stop button when there is no active session */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"stop\"\r\n              title=\"Stop the session\"\r\n              onClick={handleStop}\r\n              disabled={!session}\r\n            >\r\n              <span className=\"oi oi-media-stop\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from 'react';\r\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\r\n\r\nfunction StatusDisplay({\r\n  session,\r\n  focusDuration,\r\n  breakDuration,\r\n  isTimerRunning,\r\n}) {\r\n  return (\r\n    session && (\r\n      <>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <h2 data-testid=\"session-title\">\r\n              {session?.label} for{' '}\r\n              {session?.label === 'Focusing'\r\n                ? minutesToDuration(focusDuration)\r\n                : minutesToDuration(breakDuration)}{' '}\r\n              minutes\r\n            </h2>\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(session?.timeRemaining)} remaining\r\n            </p>\r\n            {!isTimerRunning && <h2>PAUSED</h2>}\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: '20px' }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={\r\n                  100 -\r\n                  (100 * session.timeRemaining) /\r\n                    (session.label === 'Focusing'\r\n                      ? focusDuration * 60\r\n                      : breakDuration * 60)\r\n                }\r\n                style={{\r\n                  width: `${\r\n                    100 -\r\n                    (100 * session.timeRemaining) /\r\n                      (session.label === 'Focusing'\r\n                        ? focusDuration * 60\r\n                        : breakDuration * 60)\r\n                  }%`,\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  );\r\n}\r\n\r\nexport default StatusDisplay;\r\n","import React, { useState } from 'react';\nimport useInterval from '../utils/useInterval';\nimport Duration from './Duration';\nimport Controls from './Controls';\nimport StatusDisplay from './StatusDisplay';\n// These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === 'Focusing') {\n      return {\n        label: 'On Break',\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: 'Focusing',\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const handleFocusDecrease = () =>\n    setFocusDuration(Math.max(5, focusDuration - 5));\n\n  const handleFocusIncrease = () =>\n    setFocusDuration(Math.min(60, focusDuration + 5));\n\n  const handleBreakDecrease = () =>\n    setBreakDuration(Math.max(1, breakDuration - 1));\n\n  const handleBreakIncrease = () =>\n    setBreakDuration(Math.min(15, breakDuration + 1));\n\n  const handleStop = () => {\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setSession(null);\n    setIsTimerRunning(false);\n  };\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio('https://bigsoundbank.com/UPLOAD/mp3/1482.mp3').play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: 'Focusing',\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Duration\n        session={session}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        handleFocusDecrease={handleFocusDecrease}\n        handleFocusIncrease={handleFocusIncrease}\n        handleBreakDecrease={handleBreakDecrease}\n        handleBreakIncrease={handleBreakIncrease}\n      />\n\n      <Controls\n        session={session}\n        isTimerRunning={isTimerRunning}\n        handleStop={handleStop}\n        playPause={playPause}\n      />\n\n      <StatusDisplay\n        session={session}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        isTimerRunning={isTimerRunning}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Pomodoro from \"./pomodoro/Pomodoro\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header container\">\r\n        <h1>Pomodoro Timer</h1>\r\n      </header>\r\n      <div className=\"container\">\r\n        <Pomodoro />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}